{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27158479-d512-4d62-898f-4f6899fb0187",
   "metadata": {},
   "outputs": [],
   "source": [
    "import serial\n",
    "\n",
    "NAK = b'\\x15' # negative acknowledge\n",
    "ACK = b'\\x06' # acknowledge\n",
    "ENQ = b'\\x05' # enquiry\n",
    "CR =  b'\\x0d' # carriage return\n",
    "LF =  b'\\x0a' # line feed\n",
    "\n",
    "class Controller():\n",
    "\n",
    "    def __init__(self, serial_port, baudrate=9600, pariy=serial.PARITY_NONE, stopbits=2):\n",
    "        self.serial_com = serial.Serial(port=serial_port, baudrate=baudrate, timeout=1, parity=serial.PARITY_NONE, stopbits=2)\n",
    "\n",
    "    def closeCommunication(self):\n",
    "        self.serial_com.close()\n",
    "    \n",
    "    def sendCommand(self, command):\n",
    "        return self.serial_com.write(command+CR+LF)\n",
    "    \n",
    "    def enquiry(self):\n",
    "        self.serial_com.write(ENQ)\n",
    "    \n",
    "    def readLine(self):\n",
    "        return self.serial_com.readline()\n",
    "    \n",
    "    def readAcknowledgement(self):\n",
    "        return self.serial_com.readline().rstrip()\n",
    "\n",
    "    # BAU\n",
    "    def setBaudrate(self, mode):\n",
    "        \"\"\"\n",
    "        mode (int): 0 for 9600, 1 for 19200, or 2 for 38400\n",
    "        \"\"\"\n",
    "        if mode == 0 or mode == 1 or mode == 2:\n",
    "            command = (\"BAU,{:d}\".format(mode)).encode()\n",
    "        else:\n",
    "            print(\"Incorrect baudrate\")\n",
    "            return -1\n",
    "            \n",
    "        self.sendCommand(command)\n",
    "            if self.readAcknowledgement() == ACK:\n",
    "                self.enquiry()\n",
    "                returned_mode = int(self.readLine().rstrip().decode())\n",
    "                if returned_mode == mode:\n",
    "                    print(\"Baudrate succesfully set\")\n",
    "                    return returned_mode\n",
    "                else:\n",
    "                    print(\"Unknown error\")\n",
    "                    return -1\n",
    "\n",
    "    # ERR\n",
    "    def getErrorStatus(self):\n",
    "        command = b\"ERR\"\n",
    "        self.sendCommand(command)\n",
    "        if self.readAcknowledgement() == ACK:\n",
    "            self.enquiry()\n",
    "            errors = []\n",
    "            status = self.readLine().rstrip().decode()\n",
    "            if status[0] == '1':\n",
    "                errors.append(\"Device error\")\n",
    "            if status[1] == '1':\n",
    "                errors.append(\"Hardware error (FAIL illum.)\")\n",
    "            if status[2] == '1':\n",
    "                errors.append(\"Invalid parameter\")\n",
    "            if status[3] == '1':\n",
    "                errors.append(\"Syntax error\")\n",
    "            if status == '0000':\n",
    "                errors.append(\"No error\")\n",
    "            return status, errors\n",
    "\n",
    "    # PNR\n",
    "    def getProgramNumber(self):\n",
    "        command = b\"PNR\"\n",
    "        self.sendCommand(command)\n",
    "        if self.readAcknowledgement() == ACK:\n",
    "            self.enquiry()\n",
    "            return self.readLine().rstrip().decode()\n",
    "\n",
    "    # TID\n",
    "    def getTransmitterId(self):\n",
    "        command = b\"TID\"\n",
    "        self.sendCommand(command)\n",
    "        if self.readAcknowledgement() == ACK:\n",
    "            self.enquiry()\n",
    "            return self.readLine().rstrip().decode().split(\", \")\n",
    "    \n",
    "    # PR#\n",
    "    def getPressure(self, channel):\n",
    "        command = (\"PR{:d}\".format(channel)).encode()\n",
    "        self.sendCommand(command)\n",
    "        if self.readAcknowledgement() == ACK:\n",
    "            self.enquiry()\n",
    "            status, value = self.readLine().rstrip().decode().split(\", \")\n",
    "            status = int(status)\n",
    "            value = float(value)\n",
    "            \n",
    "            if status == 1:\n",
    "                print(\"Measurement under range\")\n",
    "            elif status == 2:\n",
    "                print(\"Measurement over range\")\n",
    "            elif status == 3:\n",
    "                print(\"Transmitter error\")\n",
    "            elif status == 4:\n",
    "                print(\"Transmitter switched off\")\n",
    "            elif status == 5:\n",
    "                print(\"No transmitter\")\n",
    "            elif status == 6:\n",
    "                print(\"Identification error\")\n",
    "            elif status == 7:\n",
    "                print(\"ITR error\")\n",
    "    \n",
    "            return [status, value]\n",
    "                \n",
    "        else:\n",
    "            print(\"Error while reading sensor\")\n",
    "            return -1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
